// ============================================
// ÏóëÏÖÄ ÏóÖÎ°úÎìú ÏÑúÎπÑÏä§
// ============================================
// ÏóëÏÖÄ ÌååÏùº ÏóÖÎ°úÎìú Î∞è Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏ Ï≤òÎ¶¨
// UPSERT Î°úÏßÅ: Ïã†Í∑ú Ï∂îÍ∞Ä + Í∏∞Ï°¥ ÏóÖÎç∞Ïù¥Ìä∏
// Î≥ÄÍ≤Ω Ï∂îÏ†Å: change_history ÌÖåÏù¥Î∏îÏóê Í∏∞Î°ù
// ============================================

import xlsx from 'xlsx';
import { randomUUID } from 'crypto';
import { getDB } from '../config/database.js';
import { refreshAllSalesKPI, refreshAdminKPI } from './kpi.service.js';

// ÏóëÏÖÄ ÎÇ†Ïßú ÏãúÎ¶¨Ïñº Î≤àÌò∏Î•º DateÎ°ú Î≥ÄÌôò
const excelDateToJSDate = (serial) => {
  if (!serial) return null;
  const utc_days = Math.floor(serial - 25569);
  const utc_value = utc_days * 86400;
  const date_info = new Date(utc_value * 1000);
  return new Date(date_info.getFullYear(), date_info.getMonth(), date_info.getDate());
};

// DateÎ•º MySQL DATE ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
const formatDate = (date) => {
  if (!date) return null;
  if (date instanceof Date) {
    return date.toISOString().split('T')[0];
  }
  if (typeof date === 'string') {
    return date.replace(/\./g, '-');
  }
  return null;
};

// Î≥ÄÍ≤Ω ÏÇ¨Ìï≠ Ï∂îÏ†Å
const trackChanges = async (connection, tableName, recordId, oldData, newData, changedBy) => {
  try {
    await connection.execute(
      `INSERT INTO change_history (tableName, operation, recordId, changedBy, oldData, newData)
       VALUES (?, ?, ?, ?, ?, ?)`,
      [tableName, 'UPDATE', recordId, changedBy, JSON.stringify(oldData), JSON.stringify(newData)]
    );
  } catch (error) {
    console.error('Î≥ÄÍ≤Ω Ïù¥Î†• Ï†ÄÏû• Ïã§Ìå®:', error.message);
  }
};

// activityNotesÎ•º customer_news ÌÖåÏù¥Î∏îÏóê ÏûêÎèô Ï†ÄÏû•
const insertCustomerNewsFromActivityNotes = async (connection, companyId, companyName, activityNotes, createdBy) => {
  try {
    const newsId = randomUUID();
    const today = new Date().toISOString().split('T')[0];

    await connection.execute(
      `INSERT INTO customer_news (
        id, companyId, companyName, createdBy, department,
        category, title, content, newsDate, priority, status
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
      [
        newsId,
        companyId,
        companyName,
        createdBy || 'ÏãúÏä§ÌÖú',
        'ÏãúÏä§ÌÖú',
        'ÏùºÎ∞òÏÜåÏãù',
        `[ÏóëÏÖÄ ÏóÖÎ°úÎìú] ${companyName} ÏòÅÏóÖÌôúÎèô`,
        activityNotes,
        today,
        'Î≥¥ÌÜµ',
        'ÌôúÏÑ±'
      ]
    );

    console.log(`   üì∞ [Í≥†Í∞ùÏÜåÏãù ÏûêÎèô Ï†ÄÏû•] ${companyName} - ÏóëÏÖÄ ÏóÖÎ°úÎìú ÎÇ¥Ïö© Ï†ÄÏû• ÏôÑÎ£å`);
  } catch (error) {
    console.error(`   ‚ö†Ô∏è [Í≥†Í∞ùÏÜåÏãù ÏûêÎèô Ï†ÄÏû• Ïã§Ìå®] ${companyName}:`, error.message);
  }
};

// Í≥†Í∞ùÏÇ¨ ÏßÄÏó≠(customerRegion)ÏóêÏÑú region_id Ï∂îÏ∂ú
const getRegionIdFromCustomerRegion = async (connection, customerRegion) => {
  if (!customerRegion || customerRegion === '') return null;

  // ÏßÄÏó≠ Îß§Ìïë (Ï≤´ Îã®Ïñ¥ Ï∂îÏ∂ú)
  const regionMap = {
    'ÏÑúÏö∏': 'SEOUL',
    'Î∂ÄÏÇ∞': 'BUSAN',
    'ÎåÄÍµ¨': 'DAEGU',
    'Ïù∏Ï≤ú': 'INCHEON',
    'Í¥ëÏ£º': 'GWANGJU',
    'ÎåÄÏ†Ñ': 'DAEJEON',
    'Ïö∏ÏÇ∞': 'ULSAN',
    'ÏÑ∏Ï¢Ö': 'SEJONG',
    'Í≤ΩÍ∏∞': 'GYEONGGI',
    'Í∞ïÏõê': 'GANGWON',
    'Ï∂©Î∂Å': 'CHUNGBUK',
    'Ï∂©ÎÇ®': 'CHUNGNAM',
    'Ï†ÑÎ∂Å': 'JEONBUK',
    'Ï†ÑÎÇ®': 'JEONNAM',
    'Í≤ΩÎ∂Å': 'GYEONGBUK',
    'Í≤ΩÎÇ®': 'GYEONGNAM',
    'Ï†úÏ£º': 'JEJU'
  };

  // customerRegionÏóêÏÑú Ïãú/ÎèÑ Ï∂îÏ∂ú (Ïòà: "ÏÑúÏö∏ Í∞ïÎÇ®Íµ¨" ‚Üí "ÏÑúÏö∏")
  for (const [keyword, code] of Object.entries(regionMap)) {
    if (customerRegion.startsWith(keyword)) {
      const [result] = await connection.execute(
        'SELECT id FROM regions WHERE region_code = ?',
        [code]
      );
      return result.length > 0 ? result[0].id : null;
    }
  }

  return null;
};

// Í±∞ÎûòÏ≤ò Îç∞Ïù¥ÌÑ∞ UPSERT
export const upsertCompaniesFromExcel = async (filePath, uploadedBy) => {
  let connection;
  const results = {
    totalRows: 0,
    inserted: 0,
    updated: 0,
    skipped: 0,
    errors: [],
    changes: []
  };

  try {
    connection = await getDB();

    // ÏóëÏÖÄ ÌååÏùº ÏùΩÍ∏∞
    const workbook = xlsx.readFile(filePath);
    const sheet = workbook.Sheets['Í∏∞Î≥∏Ï†ïÎ≥¥'];

    if (!sheet) {
      throw new Error('ÏóëÏÖÄ ÌååÏùºÏóê "Í∏∞Î≥∏Ï†ïÎ≥¥" ÏãúÌä∏Í∞Ä ÏóÜÏäµÎãàÎã§.');
    }

    const companyData = xlsx.utils.sheet_to_json(sheet);
    results.totalRows = companyData.length;

    for (const row of companyData) {
      try {
        let keyValue = row['KEYVALUE'];

        // KEYVALUEÍ∞Ä ÏóÜÏúºÎ©¥ UUIDÎ°ú ÏûêÎèô ÏÉùÏÑ±
        if (!keyValue) {
          keyValue = randomUUID();
          console.log(`üìù ÏÉà KEYVALUE ÏÉùÏÑ±: ${keyValue} (Í±∞ÎûòÏ≤ò: ${row['ÏµúÏ¢ÖÍ±∞ÎûòÏ≤òÎ™Ö'] || row['Í±∞ÎûòÏ≤òÎ™Ö(ERP)']})`);
        }

        // Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
        const [existing] = await connection.execute(
          'SELECT * FROM companies WHERE keyValue = ?',
          [keyValue]
        );

        // customerRegionÏóêÏÑú region_id ÏûêÎèô Ï∂îÏ∂ú
        const customerRegion = row['Í≥†Í∞ùÏÇ¨ ÏßÄÏó≠'] || null;
        const regionId = customerRegion ? await getRegionIdFromCustomerRegion(connection, customerRegion) : null;

        const newData = {
          keyValue,
          erpCompanyName: row['Í±∞ÎûòÏ≤òÎ™Ö(ERP)'] || null,
          finalCompanyName: row['ÏµúÏ¢ÖÍ±∞ÎûòÏ≤òÎ™Ö'] || null,
          businessRegistrationNumber: row['ÏÇ¨ÏóÖÏûêÎì±Î°ùÎ≤àÌò∏'] || null,
          isClosed: row['ÌèêÏóÖÏó¨Î∂Ä'] === 'ÌèêÏóÖ' ? 'Y' : 'N',
          ceoOrDentist: row['ÎåÄÌëúÏù¥ÏÇ¨ ÎòêÎäî ÏπòÍ≥ºÏùòÏÇ¨'] || null,
          customerRegion: customerRegion,
          region_id: regionId,
          detailedAddress: row['ÏÉÅÏÑ∏Ï£ºÏÜå'] || null,
          phoneNumber: row['Ï†ÑÌôîÎ≤àÌò∏'] || null,
          businessStatus: row['Í±∞ÎûòÏÉÅÌÉú'] || null,
          department: row['Îã¥ÎãπÎ∂ÄÏÑú'] || null,
          salesProduct: row['ÌåêÎß§Ï†úÌíà'] || null,
          internalManager: row['ÎÇ¥Î∂ÄÎã¥ÎãπÏûê'] || null,
          jcwContribution: row['Ï†ïÏ≤†ÏõÖÍ∏∞Ïó¨\r\n(ÏÉÅ.Ï§ë.Ìïò)'] || row['Ï†ïÏ≤†ÏõÖÍ∏∞Ïó¨(ÏÉÅ.Ï§ë.Ìïò)'] || null,
          companyContribution: row['ÌöåÏÇ¨Í∏∞Ïó¨\r\n(ÏÉÅ.Ï§ë.Ìïò)'] || row['ÌöåÏÇ¨Í∏∞Ïó¨(ÏÉÅ.Ï§ë.Ìïò)'] || null,
          referralSource: row['ÏÜåÍ∞úÍ≤ΩÎ°ú'] || null,
          lastPaymentDate: formatDate(row['ÎßàÏßÄÎßâÍ≤∞Ï†úÏùº']),
          lastPaymentAmount: row['ÎßàÏßÄÎßâÏ¥ùÍ≤∞Ïû¨Í∏àÏï°'] || 0,
          accumulatedSales: row['ÎàÑÏ†ÅÎß§Ï∂úÍ∏àÏï°'] || 0,
          accumulatedCollection: row['ÎàÑÏ†ÅÏàòÍ∏àÍ∏àÏï°'] || 0,
          accountsReceivable: row['Îß§Ï∂úÏ±ÑÍ∂åÏûîÏï°'] || 0,
          activityNotes: row['Í≥†Í∞ù ÏÜåÏãù'] || row['ÏòÅÏóÖÌôúÎèô(ÌäπÏù¥ÏÇ¨Ìï≠)'] || null
        };

        if (existing.length === 0) {
          // Ïã†Í∑ú Ï∂îÍ∞Ä
          await connection.execute(
            `INSERT INTO companies (
              keyValue, erpCompanyName, finalCompanyName, businessRegistrationNumber, isClosed,
              ceoOrDentist, customerRegion, region_id, detailedAddress, phoneNumber, businessStatus,
              department, salesProduct, internalManager, jcwContribution, companyContribution,
              referralSource, lastPaymentDate, lastPaymentAmount, accumulatedSales,
              accumulatedCollection, accountsReceivable, activityNotes
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              newData.keyValue, newData.erpCompanyName, newData.finalCompanyName,
              newData.businessRegistrationNumber, newData.isClosed, newData.ceoOrDentist,
              newData.customerRegion, newData.region_id, newData.detailedAddress, newData.phoneNumber,
              newData.businessStatus, newData.department, newData.salesProduct,
              newData.internalManager, newData.jcwContribution, newData.companyContribution,
              newData.referralSource, newData.lastPaymentDate, newData.lastPaymentAmount,
              newData.accumulatedSales, newData.accumulatedCollection, newData.accountsReceivable,
              newData.activityNotes
            ]
          );

          // activityNotesÍ∞Ä ÏûàÏúºÎ©¥ customer_newsÏóê ÏûêÎèô Ï†ÄÏû•
          if (newData.activityNotes && newData.activityNotes.trim()) {
            await insertCustomerNewsFromActivityNotes(
              connection,
              newData.keyValue,
              newData.finalCompanyName,
              newData.activityNotes,
              uploadedBy
            );
          }

          results.inserted++;
          results.changes.push({
            keyValue,
            companyName: newData.finalCompanyName,
            action: 'Ïã†Í∑ú Ï∂îÍ∞Ä'
          });
        } else {
          // Í∏∞Ï°¥ ÏóÖÎç∞Ïù¥Ìä∏ (Î≥ÄÍ≤ΩÎêú ÌïÑÎìúÎßå)
          const oldData = existing[0];
          const changedFields = [];

          // Î≥ÄÍ≤ΩÎêú ÌïÑÎìú Ï∞æÍ∏∞
          Object.keys(newData).forEach(key => {
            if (key === 'keyValue') return; // keyValueÎäî ÎπÑÍµê Ïïà Ìï®
            if (oldData[key] !== newData[key]) {
              changedFields.push({
                field: key,
                oldValue: oldData[key],
                newValue: newData[key]
              });
            }
          });

          if (changedFields.length > 0) {
            // ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìñâ
            await connection.execute(
              `UPDATE companies SET
                erpCompanyName = ?, finalCompanyName = ?, businessRegistrationNumber = ?,
                isClosed = ?, ceoOrDentist = ?, customerRegion = ?, region_id = ?,
                detailedAddress = ?, phoneNumber = ?, businessStatus = ?, department = ?,
                salesProduct = ?, internalManager = ?, jcwContribution = ?, companyContribution = ?,
                referralSource = ?, lastPaymentDate = ?, lastPaymentAmount = ?,
                accumulatedSales = ?, accumulatedCollection = ?, accountsReceivable = ?,
                activityNotes = ?
              WHERE keyValue = ?`,
              [
                newData.erpCompanyName, newData.finalCompanyName, newData.businessRegistrationNumber,
                newData.isClosed, newData.ceoOrDentist, newData.customerRegion, newData.region_id,
                newData.detailedAddress, newData.phoneNumber, newData.businessStatus,
                newData.department, newData.salesProduct, newData.internalManager,
                newData.jcwContribution, newData.companyContribution, newData.referralSource,
                newData.lastPaymentDate, newData.lastPaymentAmount, newData.accumulatedSales,
                newData.accumulatedCollection, newData.accountsReceivable, newData.activityNotes,
                keyValue
              ]
            );

            // activityNotesÍ∞Ä Î≥ÄÍ≤ΩÎêòÏóàÍ≥† ÏÉà Í∞íÏù¥ ÏûàÏúºÎ©¥ customer_newsÏóê ÏûêÎèô Ï†ÄÏû•
            const activityNotesChanged = changedFields.find(f => f.field === 'activityNotes');
            if (activityNotesChanged && newData.activityNotes && newData.activityNotes.trim()) {
              await insertCustomerNewsFromActivityNotes(
                connection,
                newData.keyValue,
                newData.finalCompanyName,
                newData.activityNotes,
                uploadedBy
              );
            }

            // Î≥ÄÍ≤Ω Ïù¥Î†• Ï†ÄÏû•
            await trackChanges(connection, 'companies', keyValue, oldData, newData, uploadedBy);

            results.updated++;
            results.changes.push({
              keyValue,
              companyName: newData.finalCompanyName,
              action: 'ÏóÖÎç∞Ïù¥Ìä∏',
              changedFields: changedFields.map(f => f.field).join(', ')
            });
          } else {
            results.skipped++;
          }
        }
      } catch (error) {
        results.errors.push({
          row: row['NO'] || 'Ïïå Ïàò ÏóÜÏùå',
          keyValue: row['KEYVALUE'],
          error: error.message
        });
      }
    }

    // ============================================
    // üìä KPI ÏûêÎèô Ïû¨Í≥ÑÏÇ∞
    // ============================================
    // Í±∞ÎûòÏ≤ò Îç∞Ïù¥ÌÑ∞Í∞Ä Î≥ÄÍ≤ΩÎêòÏóàÏúºÎ©¥ KPI Ïû¨Í≥ÑÏÇ∞
    if (results.inserted > 0 || results.updated > 0) {
      console.log('\nüîÑ [ÏóëÏÖÄ ÏóÖÎ°úÎìú] Í±∞ÎûòÏ≤ò Îç∞Ïù¥ÌÑ∞ Î≥ÄÍ≤Ω Í∞êÏßÄ - KPI Ïû¨Í≥ÑÏÇ∞ ÏãúÏûë...');
      console.log(`   üìå Ïã†Í∑ú: ${results.inserted}Í±¥ | ÏóÖÎç∞Ïù¥Ìä∏: ${results.updated}Í±¥`);

      try {
        // 1. Î™®Îì† ÏòÅÏóÖÎã¥Îãπ KPI Ïû¨Í≥ÑÏÇ∞
        console.log('   ‚è≥ 1/2 Ï†ÑÏ≤¥ ÏòÅÏóÖÎã¥Îãπ KPI Ïû¨Í≥ÑÏÇ∞ Ï§ë...');
        const salesKpiResult = await refreshAllSalesKPI();
        console.log(`   ‚úÖ 1/2 ÏòÅÏóÖÎã¥Îãπ KPI Í∞±Ïã† ÏôÑÎ£å (${salesKpiResult.count}Î™Ö)`);

        // 2. Ï†ÑÏÇ¨ KPI Ïû¨Í≥ÑÏÇ∞
        console.log('   ‚è≥ 2/2 Ï†ÑÏÇ¨ KPI Ïû¨Í≥ÑÏÇ∞ Ï§ë...');
        await refreshAdminKPI();
        console.log('   ‚úÖ 2/2 Ï†ÑÏÇ¨ KPI Í∞±Ïã† ÏôÑÎ£å');

        console.log('‚úÖ [ÏóëÏÖÄ ÏóÖÎ°úÎìú] KPI Ïû¨Í≥ÑÏÇ∞ ÏôÑÎ£å!\n');

        // KPI Í∞±Ïã† Ï†ïÎ≥¥Î•º Í≤∞Í≥ºÏóê Ï∂îÍ∞Ä
        results.kpiRefreshed = true;
        results.kpiRefreshCount = salesKpiResult.count;
      } catch (kpiError) {
        console.error('‚ö†Ô∏è [ÏóëÏÖÄ ÏóÖÎ°úÎìú] KPI Ïû¨Í≥ÑÏÇ∞ Ïã§Ìå®:', kpiError.message);
        // KPI Ïã§Ìå®Îäî ÏóêÎü¨Î°ú Ï≤òÎ¶¨ÌïòÏßÄ ÏïäÍ≥† Í≤ΩÍ≥†Îßå ÌëúÏãú
        results.kpiRefreshed = false;
        results.kpiError = kpiError.message;
      }
    } else {
      console.log('‚ÑπÔ∏è [ÏóëÏÖÄ ÏóÖÎ°úÎìú] Î≥ÄÍ≤ΩÏÇ¨Ìï≠ ÏóÜÏùå - KPI Ïû¨Í≥ÑÏÇ∞ Í±¥ÎÑàÎúÄ');
      results.kpiRefreshed = false;
    }

    return results;
  } catch (error) {
    throw error;
  }
};

// ÏßÅÏõê Îç∞Ïù¥ÌÑ∞ UPSERT
export const upsertEmployeesFromExcel = async (filePath, uploadedBy) => {
  let connection;
  const results = {
    totalRows: 0,
    inserted: 0,
    updated: 0,
    skipped: 0,
    errors: [],
    changes: []
  };

  try {
    connection = await getDB();

    const workbook = xlsx.readFile(filePath);
    const sheet = workbook.Sheets['ÏûÖÏÇ¨ÏùºÏûê'];

    if (!sheet) {
      throw new Error('ÏóëÏÖÄ ÌååÏùºÏóê "ÏûÖÏÇ¨ÏùºÏûê" ÏãúÌä∏Í∞Ä ÏóÜÏäµÎãàÎã§.');
    }

    const employeeData = xlsx.utils.sheet_to_json(sheet);
    results.totalRows = employeeData.length;

    for (const row of employeeData) {
      try {
        const name = row['ÏÑ±Î™Ö'];

        if (!name) {
          results.skipped++;
          continue;
        }

        // Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
        const [existing] = await connection.execute(
          'SELECT * FROM employees WHERE name = ?',
          [name]
        );

        const hireDate = formatDate(excelDateToJSDate(row['ÏûÖÏÇ¨ÏùºÏûê']));
        const role1 = row['ÏòÅÏóÖÏÇ¨ÏõêÎ™©Î°ù'] || null;
        const role2 = row['Í¥ÄÎ¶¨ÏûêÎ™©Î°ù'] || null;
        const department = row['Î∂ÄÏÑú'] || null;

        if (existing.length === 0) {
          // Ïã†Í∑ú Ï∂îÍ∞Ä (ÎπÑÎ∞ÄÎ≤àÌò∏Îäî Ïù¥Î¶Ñ1234)
          const bcrypt = await import('bcrypt');
          const hashedPassword = await bcrypt.hash(`${name}1234`, 10);

          // UUID ÏÉùÏÑ± (ÏòÅÍµ¨ Ï∂îÏ†ÅÏö© - Primary Key)
          const { randomUUID } = await import('crypto');
          const employeeId = randomUUID();

          await connection.execute(
            `INSERT INTO employees (id, name, password, role1, role2, department, hireDate, status)
             VALUES (?, ?, ?, ?, ?, ?, ?, 'Ïû¨ÏßÅ')`,
            [employeeId, name, hashedPassword, role1, role2, department, hireDate]
          );
          results.inserted++;
          results.changes.push({
            name,
            action: 'Ïã†Í∑ú Ï∂îÍ∞Ä',
            id: employeeId
          });
        } else {
          // Í∏∞Ï°¥ ÏóÖÎç∞Ïù¥Ìä∏ (role1, role2, department, hireDate)
          const oldData = existing[0];
          const changedFields = [];

          if (oldData.role1 !== role1) changedFields.push('role1');
          if (oldData.role2 !== role2) changedFields.push('role2');
          if (oldData.department !== department) changedFields.push('department');
          if (oldData.hireDate !== hireDate) changedFields.push('hireDate');

          if (changedFields.length > 0) {
            await connection.execute(
              `UPDATE employees SET role1 = ?, role2 = ?, department = ?, hireDate = ? WHERE name = ?`,
              [role1, role2, department, hireDate, name]
            );

            await trackChanges(connection, 'employees', name, oldData, { role1, role2, department, hireDate }, uploadedBy);

            results.updated++;
            results.changes.push({
              name,
              action: 'ÏóÖÎç∞Ïù¥Ìä∏',
              changedFields: changedFields.join(', ')
            });
          } else {
            results.skipped++;
          }
        }
      } catch (error) {
        results.errors.push({
          name: row['ÏÑ±Î™Ö'],
          error: error.message
        });
      }
    }

    // ============================================
    // üìä KPI ÏûêÎèô Ïû¨Í≥ÑÏÇ∞
    // ============================================
    // ÏßÅÏõê Îç∞Ïù¥ÌÑ∞Í∞Ä Î≥ÄÍ≤ΩÎêòÏóàÏúºÎ©¥ KPI Ïû¨Í≥ÑÏÇ∞
    if (results.inserted > 0 || results.updated > 0) {
      console.log('\nüîÑ [ÏóëÏÖÄ ÏóÖÎ°úÎìú - ÏßÅÏõê] ÏßÅÏõê Îç∞Ïù¥ÌÑ∞ Î≥ÄÍ≤Ω Í∞êÏßÄ - KPI Ïû¨Í≥ÑÏÇ∞ ÏãúÏûë...');
      console.log(`   üìå Ïã†Í∑ú: ${results.inserted}Í±¥ | ÏóÖÎç∞Ïù¥Ìä∏: ${results.updated}Í±¥`);

      try {
        // 1. Î™®Îì† ÏòÅÏóÖÎã¥Îãπ KPI Ïû¨Í≥ÑÏÇ∞
        console.log('   ‚è≥ 1/2 Ï†ÑÏ≤¥ ÏòÅÏóÖÎã¥Îãπ KPI Ïû¨Í≥ÑÏÇ∞ Ï§ë...');
        const salesKpiResult = await refreshAllSalesKPI();
        console.log(`   ‚úÖ 1/2 ÏòÅÏóÖÎã¥Îãπ KPI Í∞±Ïã† ÏôÑÎ£å (${salesKpiResult.count}Î™Ö)`);

        // 2. Ï†ÑÏÇ¨ KPI Ïû¨Í≥ÑÏÇ∞
        console.log('   ‚è≥ 2/2 Ï†ÑÏÇ¨ KPI Ïû¨Í≥ÑÏÇ∞ Ï§ë...');
        await refreshAdminKPI();
        console.log('   ‚úÖ 2/2 Ï†ÑÏÇ¨ KPI Í∞±Ïã† ÏôÑÎ£å');

        console.log('‚úÖ [ÏóëÏÖÄ ÏóÖÎ°úÎìú - ÏßÅÏõê] KPI Ïû¨Í≥ÑÏÇ∞ ÏôÑÎ£å!\n');

        // KPI Í∞±Ïã† Ï†ïÎ≥¥Î•º Í≤∞Í≥ºÏóê Ï∂îÍ∞Ä
        results.kpiRefreshed = true;
        results.kpiRefreshCount = salesKpiResult.count;
      } catch (kpiError) {
        console.error('‚ö†Ô∏è [ÏóëÏÖÄ ÏóÖÎ°úÎìú - ÏßÅÏõê] KPI Ïû¨Í≥ÑÏÇ∞ Ïã§Ìå®:', kpiError.message);
        // KPI Ïã§Ìå®Îäî ÏóêÎü¨Î°ú Ï≤òÎ¶¨ÌïòÏßÄ ÏïäÍ≥† Í≤ΩÍ≥†Îßå ÌëúÏãú
        results.kpiRefreshed = false;
        results.kpiError = kpiError.message;
      }
    } else {
      console.log('‚ÑπÔ∏è [ÏóëÏÖÄ ÏóÖÎ°úÎìú - ÏßÅÏõê] Î≥ÄÍ≤ΩÏÇ¨Ìï≠ ÏóÜÏùå - KPI Ïû¨Í≥ÑÏÇ∞ Í±¥ÎÑàÎúÄ');
      results.kpiRefreshed = false;
    }

    return results;
  } catch (error) {
    throw error;
  }
};
