// ============================================
// Ïã§Ï†ú companies ÌÖåÏù¥Î∏îÏùò customerRegion Í∞í ÌôïÏù∏ Ïä§ÌÅ¨Î¶ΩÌä∏
// ============================================

import { getDB } from '../config/database.js';

async function checkActualRegions() {
    try {
        console.log('üìä Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ Ï§ë...\n');
        const db = await getDB();

        // 1. ÌòÑÏû¨ ÏÇ¨Ïö© Ï§ëÏù∏ customerRegion Í∞í Ï°∞Ìöå (Ïïû Î∂ÄÎ∂ÑÎßå Ï∂îÏ∂ú)
        const [rawRegions] = await db.execute(`
            SELECT customerRegion, COUNT(*) as count
            FROM companies
            WHERE customerRegion IS NOT NULL
              AND customerRegion != ''
            GROUP BY customerRegion
            ORDER BY customerRegion
        `);

        // customerRegionÏóêÏÑú Ï≤´ Î≤àÏß∏ Í≥µÎ∞± Ïù¥Ï†Ñ Í∞íÎßå Ï∂îÏ∂ú (Ïòà: "ÏÑúÏö∏ Í∞ïÎÇ®Íµ¨" -> "ÏÑúÏö∏")
        const regionMap = new Map();
        rawRegions.forEach(row => {
            const fullRegion = row.customerRegion;
            const mainRegion = fullRegion.split(' ')[0].trim(); // Ï≤´ Î≤àÏß∏ Í≥µÎ∞± Ïù¥Ï†Ñ Í∞í

            if (regionMap.has(mainRegion)) {
                regionMap.set(mainRegion, regionMap.get(mainRegion) + row.count);
            } else {
                regionMap.set(mainRegion, row.count);
            }
        });

        // MapÏùÑ Î∞∞Ïó¥Î°ú Î≥ÄÌôòÌïòÍ≥† Ï†ïÎ†¨
        const regions = Array.from(regionMap.entries())
            .map(([customerRegion, count]) => ({ customerRegion, count }))
            .sort((a, b) => a.customerRegion.localeCompare(b.customerRegion, 'ko'));

        console.log('‚úÖ ÌòÑÏû¨ companies ÌÖåÏù¥Î∏îÏóêÏÑú ÏÇ¨Ïö© Ï§ëÏù∏ Í≥†Í∞ùÏÇ¨ ÏßÄÏó≠:\n');
        console.log('ÏàúÎ≤à | ÏßÄÏó≠Î™Ö | Í±∞ÎûòÏ≤ò Ïàò');
        console.log('-----|--------|----------');
        regions.forEach((row, i) => {
            console.log(`${String(i + 1).padStart(4)} | ${row.customerRegion.padEnd(20)} | ${row.count}Í∞ú`);
        });

        console.log(`\nÏ¥ù ${regions.length}Í∞úÏùò ÏßÄÏó≠Ïù¥ ÏÇ¨Ïö© Ï§ëÏûÖÎãàÎã§.\n`);

        // 2. regions ÎßàÏä§ÌÑ∞ ÌÖåÏù¥Î∏î ÌòÑÏû¨ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
        console.log('üìã ÌòÑÏû¨ regions ÎßàÏä§ÌÑ∞ ÌÖåÏù¥Î∏î:\n');
        const [masterRegions] = await db.execute(`
            SELECT id, region_name, region_code, display_order, is_active
            FROM regions
            ORDER BY display_order
        `);

        console.log('ID | ÏßÄÏó≠Î™Ö | ÏΩîÎìú | ÏàúÏÑú | ÌôúÏÑ±');
        console.log('---|--------|------|------|------');
        masterRegions.forEach((row) => {
            console.log(`${String(row.id).padStart(2)} | ${row.region_name.padEnd(20)} | ${(row.region_code || '').padEnd(10)} | ${String(row.display_order).padStart(4)} | ${row.is_active ? 'Y' : 'N'}`);
        });

        console.log(`\nÏ¥ù ${masterRegions.length}Í∞úÏùò ÎßàÏä§ÌÑ∞ ÏßÄÏó≠Ïù¥ Îì±Î°ùÎêòÏñ¥ ÏûàÏäµÎãàÎã§.\n`);

        // 3. Î∂àÏùºÏπò ÌôïÏù∏
        const actualRegionNames = new Set(regions.map(r => r.customerRegion));
        const masterRegionNames = new Set(masterRegions.map(r => r.region_name));

        const onlyInActual = [...actualRegionNames].filter(r => !masterRegionNames.has(r));
        const onlyInMaster = [...masterRegionNames].filter(r => !actualRegionNames.has(r));

        if (onlyInActual.length > 0) {
            console.log('‚ö†Ô∏è  Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ÏóêÎäî ÏûàÏßÄÎßå ÎßàÏä§ÌÑ∞ ÌÖåÏù¥Î∏îÏóêÎäî ÏóÜÎäî ÏßÄÏó≠:');
            onlyInActual.forEach(r => console.log(`   - ${r}`));
            console.log('');
        }

        if (onlyInMaster.length > 0) {
            console.log('‚ö†Ô∏è  ÎßàÏä§ÌÑ∞ ÌÖåÏù¥Î∏îÏóêÎäî ÏûàÏßÄÎßå Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ÏóêÎäî ÏóÜÎäî ÏßÄÏó≠:');
            onlyInMaster.forEach(r => console.log(`   - ${r}`));
            console.log('');
        }

        if (onlyInActual.length === 0 && onlyInMaster.length === 0) {
            console.log('‚úÖ ÎßàÏä§ÌÑ∞ ÌÖåÏù¥Î∏îÍ≥º Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Í∞Ä ÏùºÏπòÌï©ÎãàÎã§!\n');
        }

        // 4. UPDATE SQL ÏÉùÏÑ±
        console.log('üìù regions ÌÖåÏù¥Î∏î ÏóÖÎç∞Ïù¥Ìä∏Î•º ÏúÑÌïú SQL:\n');
        console.log('-- Step 1: Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú');
        console.log('TRUNCATE TABLE regions;\n');
        console.log('-- Step 2: Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ Í∏∞Î∞òÏúºÎ°ú INSERT');
        console.log('INSERT INTO regions (region_name, region_code, display_order, is_active) VALUES');

        const insertValues = regions.map((row, i) => {
            const regionName = row.customerRegion;
            const regionCode = regionName.toUpperCase().replace(/\s+/g, '_');
            return `('${regionName}', '${regionCode}', ${i + 1}, TRUE)`;
        });

        console.log(insertValues.join(',\n') + ';\n');

        await db.end();
        console.log('‚úÖ ÏôÑÎ£å!');

    } catch (error) {
        console.error('‚ùå Ïò§Î•ò Î∞úÏÉù:', error);
        process.exit(1);
    }
}

checkActualRegions();
